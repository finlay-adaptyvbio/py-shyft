"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import geyser_pb2
import grpc
import grpc.aio
import typing
from solana_storage_pb2 import (
    BlockHeight as BlockHeight,
    CompiledInstruction as CompiledInstruction,
    ConfirmedBlock as ConfirmedBlock,
    ConfirmedTransaction as ConfirmedTransaction,
    Fee as Fee,
    InnerInstruction as InnerInstruction,
    InnerInstructions as InnerInstructions,
    Message as Message,
    MessageAddressTableLookup as MessageAddressTableLookup,
    MessageHeader as MessageHeader,
    NumPartitions as NumPartitions,
    Rent as Rent,
    ReturnData as ReturnData,
    Reward as Reward,
    RewardType as RewardType,
    Rewards as Rewards,
    Staking as Staking,
    TokenBalance as TokenBalance,
    Transaction as Transaction,
    TransactionError as TransactionError,
    TransactionStatusMeta as TransactionStatusMeta,
    UiTokenAmount as UiTokenAmount,
    UnixTimestamp as UnixTimestamp,
    Unspecified as Unspecified,
    Voting as Voting,
)

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class GeyserStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Subscribe: grpc.StreamStreamMultiCallable[
        geyser_pb2.SubscribeRequest,
        geyser_pb2.SubscribeUpdate,
    ]

    Ping: grpc.UnaryUnaryMultiCallable[
        geyser_pb2.PingRequest,
        geyser_pb2.PongResponse,
    ]

    GetLatestBlockhash: grpc.UnaryUnaryMultiCallable[
        geyser_pb2.GetLatestBlockhashRequest,
        geyser_pb2.GetLatestBlockhashResponse,
    ]

    GetBlockHeight: grpc.UnaryUnaryMultiCallable[
        geyser_pb2.GetBlockHeightRequest,
        geyser_pb2.GetBlockHeightResponse,
    ]

    GetSlot: grpc.UnaryUnaryMultiCallable[
        geyser_pb2.GetSlotRequest,
        geyser_pb2.GetSlotResponse,
    ]

    IsBlockhashValid: grpc.UnaryUnaryMultiCallable[
        geyser_pb2.IsBlockhashValidRequest,
        geyser_pb2.IsBlockhashValidResponse,
    ]

    GetVersion: grpc.UnaryUnaryMultiCallable[
        geyser_pb2.GetVersionRequest,
        geyser_pb2.GetVersionResponse,
    ]

class GeyserAsyncStub:
    Subscribe: grpc.aio.StreamStreamMultiCallable[
        geyser_pb2.SubscribeRequest,
        geyser_pb2.SubscribeUpdate,
    ]

    Ping: grpc.aio.UnaryUnaryMultiCallable[
        geyser_pb2.PingRequest,
        geyser_pb2.PongResponse,
    ]

    GetLatestBlockhash: grpc.aio.UnaryUnaryMultiCallable[
        geyser_pb2.GetLatestBlockhashRequest,
        geyser_pb2.GetLatestBlockhashResponse,
    ]

    GetBlockHeight: grpc.aio.UnaryUnaryMultiCallable[
        geyser_pb2.GetBlockHeightRequest,
        geyser_pb2.GetBlockHeightResponse,
    ]

    GetSlot: grpc.aio.UnaryUnaryMultiCallable[
        geyser_pb2.GetSlotRequest,
        geyser_pb2.GetSlotResponse,
    ]

    IsBlockhashValid: grpc.aio.UnaryUnaryMultiCallable[
        geyser_pb2.IsBlockhashValidRequest,
        geyser_pb2.IsBlockhashValidResponse,
    ]

    GetVersion: grpc.aio.UnaryUnaryMultiCallable[
        geyser_pb2.GetVersionRequest,
        geyser_pb2.GetVersionResponse,
    ]

class GeyserServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Subscribe(
        self,
        request_iterator: _MaybeAsyncIterator[geyser_pb2.SubscribeRequest],
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[geyser_pb2.SubscribeUpdate], collections.abc.AsyncIterator[geyser_pb2.SubscribeUpdate]]: ...

    @abc.abstractmethod
    def Ping(
        self,
        request: geyser_pb2.PingRequest,
        context: _ServicerContext,
    ) -> typing.Union[geyser_pb2.PongResponse, collections.abc.Awaitable[geyser_pb2.PongResponse]]: ...

    @abc.abstractmethod
    def GetLatestBlockhash(
        self,
        request: geyser_pb2.GetLatestBlockhashRequest,
        context: _ServicerContext,
    ) -> typing.Union[geyser_pb2.GetLatestBlockhashResponse, collections.abc.Awaitable[geyser_pb2.GetLatestBlockhashResponse]]: ...

    @abc.abstractmethod
    def GetBlockHeight(
        self,
        request: geyser_pb2.GetBlockHeightRequest,
        context: _ServicerContext,
    ) -> typing.Union[geyser_pb2.GetBlockHeightResponse, collections.abc.Awaitable[geyser_pb2.GetBlockHeightResponse]]: ...

    @abc.abstractmethod
    def GetSlot(
        self,
        request: geyser_pb2.GetSlotRequest,
        context: _ServicerContext,
    ) -> typing.Union[geyser_pb2.GetSlotResponse, collections.abc.Awaitable[geyser_pb2.GetSlotResponse]]: ...

    @abc.abstractmethod
    def IsBlockhashValid(
        self,
        request: geyser_pb2.IsBlockhashValidRequest,
        context: _ServicerContext,
    ) -> typing.Union[geyser_pb2.IsBlockhashValidResponse, collections.abc.Awaitable[geyser_pb2.IsBlockhashValidResponse]]: ...

    @abc.abstractmethod
    def GetVersion(
        self,
        request: geyser_pb2.GetVersionRequest,
        context: _ServicerContext,
    ) -> typing.Union[geyser_pb2.GetVersionResponse, collections.abc.Awaitable[geyser_pb2.GetVersionResponse]]: ...

def add_GeyserServicer_to_server(servicer: GeyserServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
